# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- '*'

pool:
  vmImage: 'ubuntu-18.04'
  demands:
  - npm

variables:
  #solution: '**/*.sln'
  #buildPlatform: 'Any CPU'
  buildConfiguration: 'Release' #Standard variable specifying release build.
  wwwRootDir: 'Tailspin.SpaceGame.Web/wwwroot' #Location of WWW Directory.
  dotNetSdkVersion: #Version of .NET used for the build.

steps:
#- task: NuGetToolInstaller@1
#- task: NuGetCommand@2
#  inputs:
#    restoreSolution: '$(solution)'

#- task: VSBuild@1
#  inputs:
#    solution: '$(solution)'
#    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'

#- task: VSTest@2
#  inputs:
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'

- task: UseDotNet@2
  #displayName: 'Use .NET Core SDK 3.1.300' #Added Variable.
  displayName: 'Using .NET Core SDK $(dotNetSdkVersion)'
  inputs:
    # packageType: sdk
    #version: 3.1.300
    version: $(dotNetSdkVersion)

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

#- script: './node_modules/.bin/node-sass Tailspin.SpaceGame.Web/wwwroot --output Tailspin.SpaceGame.Web/wwwroot'
- script: './node_modules/.bin/node-sass $(wwwRootDir) --output $(wwwRootDir)'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp to Minify JS'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  #workingDirectory: Tailspin.SpaceGame.Web/wwwroot
  workingDirectory: $(wwwRootDir)

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

###MOVED TO TEMPLATE BELOW to build both Debug and Release.
#- task: DotNetCoreCLI@2
#  #displayName: 'Build the project - Release'
#  displayName: 'Build Project $(buildConfiguration)'
#  inputs:
#    command: 'build'
#    #arguments: '--no-restore --configuration Release'
#    arguments: '--no-restore --configuration $(buildConfiguration)'
#    projects: '**/*.csproj'
#
#- task: DotNetCoreCLI@2
#  displayName: 'Publish Project - Release'
#  inputs:
#    command: 'publish'
#    projects: '**/*.csproj'
#    purblishWebProjects: false
#    arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/Release'
#    zipAfterPublish: true


#Call Build Template for both Debug and Release.
- template: templates/build.yml
  parameters:
    buildConfiguration: 'Debug'

- template: templates/build.yml
  parameters:
    buildConfiguration: 'Release'


- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded() #Default behavor. Only runs if preceeding step failed.
